# ============================
# Services Definition
# ============================
services:

  # ============================
  # Backend Service (Django App)
  # ============================
  backend:
    build:
      context: ./SurfQuest_Backend/src        # Path to the backend source code
      dockerfile: Dockerfile.dev.backend      # Dockerfile to build the backend image
    container_name: django_app                # Name of the container instance

    # Load environment variables from the specified .env file
    env_file:
      - ./.env.dev.backend

    # Explicitly set DJANGO_ENV for clarity
    environment:
      - DJANGO_ENV=dev
      - DJANGO_SETTINGS_MODULE=surfquest.settings.dev
      - PYTHONPATH=/app  

    # Map the container's internal port 8000 to the host's port 8000
    ports:
      - "8000:8000"

    # Mount the source code for hot-reloading
    volumes:
      - ./SurfQuest_Backend/src:/app             # Sync the backend source code
      - ./SurfQuest_Backend/src/media:/app/media # Map media folder for uploads
      - ./staticfiles:/app/staticfiles         # Map static files for serving

    # Specify the Docker network to use
    networks:
      - surfquest-network

    # Dependencies: Wait for the database to be healthy before starting
    depends_on:
      db:
        condition: service_healthy

    # Health check configuration
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]  # Check if Django is responding
      interval: 10s           # Time between health checks
      retries: 5              # Number of retries before marking as unhealthy
      start_period: 5s        # Initial delay before starting health checks
      timeout: 5s             # Timeout for each individual check

  # ============================
  # Database Service (PostgreSQL)
  # ============================
  db:
    image: postgres:15                 # Official PostgreSQL image
    container_name: postgres_db        # Name of the container instance

    # Load environment variables for DB connection
    env_file:
      - ./.env.dev.backend

    # Map the container's internal port 5432 to the host's port 5432
    ports:
      - "5432:5432"

    # Store database data in a persistent Docker volume
    volumes:
      - pgdata:/var/lib/postgresql/data

    # Specify the Docker network to use
    networks:
      - surfquest-network

    # Health check to ensure PostgreSQL is ready before backend attempts connection
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 5s           # Time between health checks
      retries: 5             # Number of retries before marking as unhealthy
      start_period: 5s       # Initial delay before starting health checks
      timeout: 5s            # Timeout for each individual check

  # ============================
  # Frontend Service (Next.js App)
  # ============================
  frontend:
    build: 
      context: ./SurfQuest_Frontend/surfquest_nextjs   # Path to frontend source
      dockerfile: Dockerfile.dev.frontend              # Dockerfile for frontend
    container_name: nextjs_app                         # Name of the container instance

    # Load environment variables for Next.js
    env_file:
      - ./SurfQuest_Frontend/surfquest_nextjs/.env.dev.frontend

    # Map the container's internal port 3000 to the host's port 3000
    ports:
      - "3000:3000"

    # Hot-reloading enabled by mounting the source code
    volumes:
      - ./SurfQuest_Frontend/surfquest_nextjs:/app

    # Dependencies: Wait for backend and DB to be running
    depends_on:
      - backend
      - db

    # Specify the Docker network to use
    networks:
      - surfquest-network

  # ============================
  # Nginx Service (Reverse Proxy)
  # ============================
  nginx:
    image: nginx:latest                             # Official Nginx image
    container_name: nginx_server                    # Name of the container instance

    # Map the Nginx configuration file
    volumes:
      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf  # Nginx config for dev
      - media_volume:/app/media                           # Map media files

    # Map the container's internal port 80 to the host's port 8080
    ports:
      - "8080:80"

    # Dependencies: Wait for backend and frontend to be running
    depends_on:
      - backend
      - frontend

    # Specify the Docker network to use
    networks:
      - surfquest-network

# ============================
# Docker Volumes
# ============================
volumes:
  pgdata:
     external: true    # External volume for database persistence
  media_volume:
     external: true    # External volume for uploaded media files

# ============================
# Docker Networks
# ============================
networks:
  surfquest-network:
    driver: bridge     # Bridge network for internal communication