version: "3.9"

services:
  backend:
    build: ./SurfQuest_Backend/src
    container_name: django_app
    environment:
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DEBUG=False  # Always false for prod
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - ENVIRONMENT=docker
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    networks:
      - surfquest-network

  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: surfquest-db
      POSTGRES_USER: Admin44
      POSTGRES_PASSWORD: Admin44
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - surfquest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U Admin44 -d surfquest-db"]
      interval: 5s
      retries: 5
    
  frontend:
    build: 
      context: ./SurfQuest_Frontend/surfquest_nextjs
      dockerfile: Dockerfile
    container_name: nextjs_app
    environment:
      - NEXT_PUBLIC_USERS_API_URL=http://backend:8000/api/users/
      - NEXT_PUBLIC_TOKENS_API_URL=http://backend:8000/api/login/
      - NODE_ENV=production
      - ENVIRONMENT=docker
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - db
    networks:
      - surfquest-network
  
  nginx:
    image: nginx:latest
    container_name: nginx_server
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - media_volume:/app/media
    ports:
      - "8080:80"
    depends_on:
      - backend
      - frontend
    networks:
      - surfquest-network

volumes:
  pgdata:
     external: true
  media_volume:
     external: true

networks:
  surfquest-network:
    driver: bridge
