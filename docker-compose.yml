version: "3.9"

services:
  backend:
    build: ./SurfQuest_Backend/src
    container_name: django_app
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DEBUG=${DEBUG}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - ENVIRONMENT=docker
    volumes:
      - ./SurfQuest_Backend/src:/app
      - ./SurfQuest_Backend/src/media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
       condition: service_healthy
    networks:
      - surfquest-network

  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: postgres_db
      POSTGRES_USER: Admin44
      POSTGRES_PASSWORD: Admin44
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - surfquest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U Admin44 -d postgres_db"]
      interval: 5s
      retries: 5
    
  frontend:
    build: 
      context: ./SurfQuest_Frontend/surfquest_nextjs
      dockerfile: Dockerfile
    container_name: nextjs_app
    command: npm run dev 
    volumes:
      - ./SurfQuest_Frontend/surfquest_nextjs/src:/app/src
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_USERS_API_URL=http://localhost:8000/api/users/
      - NEXT_PUBLIC_TOKENS_API_URL=http://localhost:8000/api/login/
      - NODE_ENV=development
      - ENVIRONMENT=docker
    depends_on:
      - backend
      - db
    networks:
      - surfquest-network

volumes:
  pgdata:

networks:
  surfquest-network:
    driver: bridge